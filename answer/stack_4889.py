# Q.
# 여는 괄호와 닫는 괄호만으로 이루어진 문자열이 주어진다.
# 여기서 안정적인 문자열을 만들기 위한 최소 연산의 수를 구하려고 한다.
# 안정적인 문자열의 정의란 다음과 같다.
#
# 빈 문자열은 안정적이다.
# S가 안정적이라면, {S}도 안정적인 문자열이다.
# S와 T가 안정적이라면, ST(두 문자열의 연결)도 안정적이다.
# {}, {}{}, {{}{}}는 안정적인 문자열이지만, }{, {{}{, {}{는 안정적인 문자열이 아니다.
#
# 문자열에 행할 수 있는 연산은 여는 괄호를 닫는 괄호로 바꾸거나,
# 닫는 괄호를 여는 괄호로 바꾸는 것 2가지이다.
#
# Input.
# 입력은 여러 개의 데이터 세트로 이루어져 있다. 각 데이터 세트는 한 줄로 이루어져 있다.
# 줄에는 여는 괄호와 닫는 괄호만으로 이루어진 문자열이 주어진다.
# 문자열의 길이가 2000을 넘는 경우는 없고, 항상 길이는 짝수이다.
#
# 입력의 마지막 줄은 '-'가 한 개 이상 주어진다.
#
# Output.
# 각 테스트 케이스에 대해서, 테스트 케이스 번호와 입력으로 주어진 문자열을
# 안정적으로 바꾸는데 필요한 최소 연산의 수를 출력한다.


# 1. 개수가 반반이 되는 경우 스탑 ?
# import sys
#
# c = ''
# i = 0
# s = []
# while c != '-' :
#     s[i] = sys.stdin.readline
#     i += 1


# Answer
# 어쨌거나 짝이 맞아야 하는거니까 짝이 안맞는 경우를 카운트 한다
# { 얘만 스택에 넣고
# } 이게 나올때마다 pop을 하는데
# 만약 stack 비었다 -> 카운트 증가
# 문자열이 종료됐다 -> 카운트에 짝지어지지 못해서 스택에 남아있는 친구들을 2로 나누었을때 몫의 값

rank = 1
while True:
    stack = []
    count = 0
    inputString = input()

    if '-' in inputString:
        break

    for i in inputString:
        if i == "{":
            stack.append(i)
        else:
            if stack:
                stack.pop()
            else:
                count += 1
                stack.append('{')

    count += len(stack) // 2

    print(f'{rank}. {count}')
    rank += 1

